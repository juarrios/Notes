Progressive Web Apps (Pete Lapage from Google)

Introduction:
  Most people install few Apps and that's it
  Combine best of web and best of Apps
  Reliable, fast and engaging experience using the web
  Reliable: load quickly even on slow or no network
  Fast: scroll and animate smoothly
  Engaging: sending push notifications
  Integrating: showing on home screen and loading as top level full screen app
  Architecture: 
    App shell model
      Separates content from data
      Ensure data loads as quickly as possible
    Service workers:
      Caching: strategies for different needs
    WebApp manifest:
      Makes web app installable
  Progressive enhancement will give a standard experience

Why Build a Progressive Web App?
  Web advantages:
    Easy distribution
    Immediate redeployment
    Simple AB testing
  Single tap web app access
    No need for App store or signing up
  Top level, task switcher, home screen
    
Technologies Behind:
  Service Workers:
    Seat between browser and server
    Act as client side proxy
    Written in JavaScript
    Cache locally to load near instantly
    Responds to network requests
    Can define events that can wake it up
      Push messages
      Seamless data synchronization when connection restored
    Don't relay on browser or web app being open
    Exists beyond the browser
  Web App Manifest File:
    Control how web app appears to user
    Hot to launch it
    Installs banner and prompts to add to home screen
    Feels like a native app

What is an App Shell?
  Separates core UI and infrastructure from data
  All UI and infrastructure cached locally using service worker
  Minimum HTML, CSS and JS required for UI progressive web app
  Allows minimum pixels on screen without the network
  Ensures reliably good performance
  First load is quick and immediately cached using service worker
  Repeat visit only needs to retrieve necessary data
  Similar to a native app package that loads from a store
    Core components to show App but without data
  Allows to focus on speed
    Instant loading
    Regular updates without an app store

Why use an App Shell?
  Use www.webpagetest.org to test a web app performance loading   
  Shows advantage on different network speeds when repeat loading
  
Design the App Shell
  Doing AJAX style data loading
    Content refresh regularly but managed separately
  Break design into core components
    What need to be on screen immediately?
    UI components key to app
    Supporting resources: JS, CSS, etc
  Quiz: some HTML, some CSS, some JS, some Images, No Data

The Weather App Shell
  Download code: https://www.github.com/udacity/ud811
  Run using 
    Web Server for Chrome: 
      https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb
    Python's SimpleHTTPServer
    Apache
  Look at 1-12-skeleton folder
  
  Quiz How well ...: getForecast, updateForecastCard, toggleAddDialog, 2
  Building accessibility is part of the process and should not be done at the end!
  
Get Data on Screen ASAP:
  Progressive WAs should start fast and be usable immediately.
  To be useful it needs data.
    
Server-Side Rendering:
  Fastest way to go
  Challenge for App-Shell model because data is already embedded in UI
    If App catches UI results in outdated content
    
Data with AJAX request:
  Extra HTTP request fired after JS has been downloaded and run
  It is slow in 2G or 3G
  
Inject the Data:
  Combination of Server-Side Rendering and AJAX request
    Server injects data into App's JS
    Data is separate from UI and good for App Shell model
      Eliminated need for xtra HTTP request
      Still run little JS to display the data
      Later can make AJAX requests for more recent data
  
  Quiz: 
    insert "injectedForecast" variable at top of app.js
    add "app.updateForecastCard(injectedForecast);" at bottom of app object definition
    
Storage Intro:
  Every App needs to store data
    Simple preferences
    Complex relational datasets
    There is not a "one size fits all"
  
Storage Options:
  Local Storage:
    Name-Value pair only strings
    Available in most browsers 
    Synchronous: calls blocks and can affect preformance
    Non-transactional: can overwrite important data
    Avoid it!
  Cache Storage:
    Asyncronous, fast
    Non-transactional: can overwrite important data
    Not available in some browsers
      Feature detect and potentially polyfill
  IndexedDB:
    Complex data
    Asynchronous
    Transactional
    Available everywhere
    Best fit
    Drawback: 
      ugly API
      lots of setup required
      callbacks to handle
      Repo libraries to simplify:
        localForage (Mozilla): Local storage like API
        Lovefield (google): SQL like API (Arthur Hsu)

Persistence:
  Browsers data can be wiped out anytime
  Sync critical data to cloud ASAP
  Advantage:
    Settings are the same from other device
    Can continue with data from last session

  Quiz:
    Use localForage: simple, easy to use and takes JS objects
    Insert <script> URL to localforage at html bottom
    Insert "app.saveSelectedCities" function in aap.js to save array
    Update 'butAddCity' event handler to call app.saveSelectedCities()
    Add 'DOMContentLoaded' event handler to retrieve/initialize 'selectedCities' using localForage
    
    
Service Workers
  A JS file run by browser in the background separate from web page that handles events
  Fetch events
    Intercepting and responding to network requests
    Proxy between network and browser
    Can provide content even when offline
    Can respond to push msgs from server to browser
    Future:
      Periodic Sync
      Geo fencing
  How SW work?
    WebPage register SW
    Installed in browser
    Activated
    Idle
      Fetch
      Push / Msg
      Terminated -> Idle
  HTTPS:
    SW requires https except when local
    Ensures SW can not be manipulated during journey across network
  Registering SW:
    Code snipped using progressive enhancement:
      if ('serviceWorker' in navigator) {
        navigator.serviceworker.register('/service-worker.js')
          .then(
            function(registration) {
              console.log('Service Worker Registered', registration);
            }
          );
      }
      
  SW Scope:
    Limited to the scope provided during registration
    examples:
      Entire domain
        .register('/sw.js')
      Limited to folder URLs:
        .register('/folder/sw.js')
        
  SW Events & Debugging:
    Work in "incognito" mode to ensure no cache is present
    Tool: chrome://serviceworker-internals/
      Shows installed service workers state
      Allow to update or delete
      Careful when using many browser pages since all will use same SW
        Check skip waiting and client's claim to avoid this
    Can also use Resources tab->Service Workers from DevTools
    If not using incognito use chrome://settings/cookies to erase everything
    
  Caching AppShell on Install:
    When SW registers, triggers an 'install' event
    Use 'install' event to add AppShell to cache
      Add HTML, CSS and JavaScript:
        var cacheName = 'myAppShell';
        var filesToCache = [...];
        
        self.addEventListener('install', function(e) {
         e.waitUntil(
          caches.open(cacheName).then(function(cache) {
            return cache.addAll(filesToCache};
          });
        ...
    "addAll()" 
      takes a list of URLs to load 
      it is atomic, if a file fails, whole call fails
      
  Updating the Cache:
    Use 'Activate' event to clean old cache versions:
    
      var cacheName = 'weatherPWA-v3';
      self.addEventListener('activate', function(e) {
        e.waitUntil(
          caches.keys().then(function(keylist) {
           return Promise.all(keyList.map(function(key) {
            if (key!==cacheName && key!==dataCacheName} {
              return caches.delete(key);
            }
      ...
    Disadvantages:
      Update cache key (cacheName) every time an AppShell resource is changed
        Otherwise old content will be served
      Entire cache is invalidated when a single file changes
      
  Handling the Fetch Event:
    Use 'fetch' event to intercept all network requests in SW
    Then serve all requested resource from the cache
    
      self.addEventListener('fetch', function(e) {
        console.log('[ServiceWorker] Fetch', e.request.url);
        e.respondWith(
          caches.match(e.request).then(function(response) {
            return response || fetch(e.request);
      ...      
    "match()" evaluates request
      checks if is available in the cache
      response will be filled if available in cache
      otherwise uses fetch(e.request) to get from network
           
    Quiz:
      Feature detect & register SW
      Add install event handler to SW
      Add activate event handler to SW
      Add fetch event handler to SW
      No errors in console & tested in many browsers
      
  Caching Strategies:
    Cache First:
      First look at cache
      If not found request network
      For commonly used resource
        Key components of App Shell
      Careful with:
        Application data
        Resources that change frequently
        Otherwise might get stale data
        
    Network first:
      First look at network then cache
      When desiring freshest data if available
      Rather have stale data than no data at all
      Good for content that updates frequently
        Not part of the App Shell
      Drawback:
        Slow network
        
    Cache Only:
      Grab only from cache otherwise fail
      When guarantee that no network request will be made
      example: saving battery on mobile devices
      
    Network only:
      Grab only from network, otherwise fail
      Ideal for things with no offline equivalent:
        analitic pings
        non-get request
        
    Cache and Network race:
      AKA "fastest"
      Responds with whichever returns first
      Usually cache is first but when network completes cache is updated
      
    Cache then Network
      Important to get data on screen ASAP
      Show cached data first then update cache and page when network data arrives
      
    QUIZ:
      Inventory and prices for an ecommerce site:           Network only
      Images required by the app needed for first render:   Cache only
      Social media timeline data:                           Cache, then network
      Game leader board data:                               Network first, then cache
    
  Assignment:
  Weather App will run as "Cache first, then network" strategy to update with latest data
    1) Modify getForecast method: feature detect 'caches' object and retrieve data from it
    2) Modify updateForecastCard method: 
      make sure old data won't overwrite new data
      compare date values to decide
    3) Add "data-dt" attribute to "date" tag to store timestamp when was updated
    4) In service-worker.js: 
      update cacheName version
      add new "dataCacheName" for storing the data
      in 'activate' event handler and check for "dataCacheName" also to avoid deleting it
      in 'fetch' retrieve data, cache it and return
  
  Offline:
    Jake Archibald's offline web applications course
    
  Service Worker Precache Library:
    Node module library for auto-generating a SW to precache AppShell
    Configuration parameters
      Define runtime caching options
      Can be use with Gulp or Grunt build scripts or CLI
      Creates SW and saves results to a file
    Gulp Example:
      Install sw-precache
        >npm install sw-precache --save-dev
      Add sw-precache to Gulp file
        var swPrecache = require('sw-precache');
      Add new task to build SW:
        gulp.task('generate-sw', function() {
          var swOptions = {
            staticFileGlobs: [
              './*.html',
              './images/*.{png,svg,gif,jpg}',
              './scripts/**/*.js',
              './styles/**.*.css'
            ],
            stripPrefix: '.',
            runtimeCaching: [{
              urlPattern: /^https:\/\/publicdata-weather.\.firebaseio\.com/,
              handler: 'networkFirst',
              options: {
                cache: {
                  name: 'weatherData'
                }
              }
            }]
          };
          return swPrecache.write('service-worker.js', swOptions);
        });
      CLI commands:
        >gulp serve
        Uses browser sync to serve the files locally
        When files are changed
          service worker is rebuilt automatically
          browser refreshes automatically
      
Web App Manifest:
  JSON file that controls 
    how web app appears to users
    behavior when launched from home screen
  Configuration
    Minimum
      "name": "Weather",
      "short_name": "Weather"             (used in home screen)
      "start_url": "/index.html?hs=true", (make sure is AppShell cached)
      "icons": [{
        "src": "/icons/icon-128.png",     (recommend 8 sizes)
        "sizes": "128x128",               (48,96,128,144, 192,256,384,512)
        "type": "image/png"
        }, {...}]
      "background_color": "#3E4EB8",      (use for splash screen)
      "theme_color": "#2F3BA2",           (UI elements)
      "display": "standalone",
      "orientation": "portrait"
  Validation:
    Use URL https://manifest-validator.appspot.com
  Link manifest to application:
    In the head of each page add:
      <link rel="manifest" href="manifest.json">
          
  Install Banner:
    Ability to quickly and seamlessly add Web App to the home screen
    Chrome looks for heuristics to show "Add To Home Screen" banner:
      Service Worker
      Web App Manifest File
      Engaged User:
        Two navigations within at least five minutes
    Defering or cancelling banner:
      Until a convenient time to avoid breaking flow
    Testing:
      Disable engagement checks
      Enable: #bypass-app-banner-engagement-checks
      
  Safari:
    Using meta tags in html document head
    Icons:
      Placing file named apple-touch-icon.png in document folder
    Tags:
      <link rel="apple-touch-icon" sizes="60x60" href="apple-60.png" />
      To cover all apple devices need 6 sizes:
        60x60,76x76,120x120,152x152,167x167,180x180
    Hide browser UI components:
      <meta name="apple-mobile-web-app-capable" content="yes">
    Minimize status bar:
      <meta name="apple-mobile-web-app-status-bar-style"
        content="black-translucent">
      Add some padding since status text is still there
    Check Apple's Safari Web Content Guide:
      "Configuring Web Applications"
      
  HTTPS Host:
    Service Worker registration require HTTPS
    Options:
      Add HTTPS to server
      Hosting provider that use HTTPS
        GitHub pages
        Firebase
        Google app engine
    Firebase deploy steps:
      Create account and add new project
      Install Firebase CLI tools
      Check hosting docs in the instructor notes for quick quide
        https://www.firebase.com/docs/hosting
      Authenticate using CLI 
        >firebase login
      Initialize with 
        >firebase init
        app name, directory, etc.
      Deploy with
        >firebase deploy
        will upload everything
        
    
    
      
  
  
    