Docker for .NET Developers with Visual Studio

Images: Like classes, the blueprint
  Made up of layers: saves download time and disk space
Containers: Instances, running machines
  
Docker Hub: 
  Images already created for use
  https://hub.docker.com
  
Common CLI commands:
  >docker -v
  >docker image list
  >docker pull nginx:1.13.8
  >docker image list
  >docker rmi [imageName or Image ID]
    Untags image and removes layers
  >docker run -it nginx:1.13.8 /bin/bash
  >docker container list
  >docker stop [container ID]
  >docker container list -a
  >docker rm [container ID]
  
Dockerfile:
  FROM microsoft/aspnetcore-build:2.0 AS build
  WORKDIR /build
  COPY . .
  RUN dotnet restore
  RUN dotnet publish -c Release -o output
  
  FROM microsoft/aspnetcore:2.0
  WORKDIR /app
  COPY --from=build /build/output .
  ENTRYPOINT ["dotnet", "ConferenceApp.dll"]
  
Build Dockerfile:
  >docker build -t conference/api .
  >docker image list
  >docker system prune
  >docker run -d --name conference_api conference/api
  >docker container list -a
  >docker logs conference_api
  
Clean Up
  >docker rm conference_api
  >docker container list -a
  >docker rmi conference/api
  >docker image list
  
Docker Compose:
  Create file docker-compose.yml:
  
  version: '3'
  
  services:
    api: 
      image: conference/api
      container_name: conference_api
      build:
        context: .
      ports:
        - 5000:80
      environment:
        ASPNETCORE_ENVIRONMENT: Production
      depends_on:
        - postgres
      postgres:
        image: postgres:9.6.3
        container_name: conference_db
        environment:
          POSTGRES_DB: conference
          POSTGRES_USER: conf_app
          POSTGRES_PASSWORD: docker
        ports:
          - 5432:5432
        volumes:
          - ./db:/docker-entrypoint-initdb.d
          
Run Compose stack:
  >docker-compose up
  errors ...
  >docker stop conference_db
  >docker container list -a
  >docker logs conference_api
  >docker-compose up
  
  http://localhost:5000/api
  
Docker Hub push:
  >docker images
  >docker tag 4356... lebrandt/conference_api:first_push
  >docker images
  >docker login
    Username:
    Password:
  >docker push leebrandt/conference_api:first_push
  
Where to Next?
  Deploy to a cloud provider
    "Deploying Docker to AWS with Arthur Olvelt"
    "Deploying Container Apps with Docker Cloud with Greg Hellings"
  Docker orchestrators:
    Allow to cluster and scale containers
    Windows: Docker Swarm
    Google: Kubernetes
    Apache: Mesosphere
  Docker community on Slack
    https://dockercommunity.slack.com
  
  
  