Learning Chrome Web Developer Tools ( Sasha Vodnik @ Lynda.com )

Welcome
  Chrome dev tools is popular to check web pages and apps
  Tools for exploring the DOM
  Examine errors and create own error messages
  Open source files and set new breakpoints
  Look at HTTP request and response headers
  Identify bottlenecks in page loads
  
1) Environment Setup
  Visual Studio Code, Chrome and http-server
    Chrome: popular due to extensive and powerful dev tools built in
    Visual Studio Code: 
      created for web development
      Windows, Mac and Linux releases
      Code available in GitHub and can submit issues
      Add Extensions:
        Auto Complete Tag by Jun Han
        Open in Browser by TechER
          Allows to open code in default browser with Alt-B shortcut
          Saves a trip to the File Manager to open the file
        vscode-icons by Roberto Huertas
          Icons in File Explorer to visually identify file type
    http-server:
      Install using node npm:
        >npm install http-server -g

2) Developer Tools Introduction
  Access and use Chrome Developer Tools
    All major browser include dev tools but Google Chrome is a leader
    Enable to
      Examine code
      Run tests
      Evaluate metrics
    Three ways to access Chrome's dev tools
      Menu
      Ctrl-Shift-I or F12
      Right click -> Inspect
    Dev tools window can be a separate window or docket left, bottom or top

  Customize the display of Developer Tools
    Dev Tools gray bar contains different panels
      Elements, Console, Source, Network ...
    Menu "Show console drawer" or Esc adds a bottom panel to see console errors / msgs
    Additional non-default tools in Menu->More Tools
      Some open in main section
      Some open in console drawer
    Beside Google provided DevTools can add more tools with browser extensions
      Example: React Developer Tools extensions
    Customize menu has more items but most useful is Settings
      Set of configuration options
      Divided in several sections
      Shortcuts section can help to save time 
      
3) Using the Elements Panel
  Inspect elements
    Elements shows code in current web page as rendered by the browser
      Not just the HTML that was loaded
      Includes programmatic transformations
        Data from external sources
        Content generated by a framework like React or Angular
        Scripted changes       
    Includes HTML and CSS applied to elements
    Selecting "Inspect" on a web page element, shows code for that element
    Elements Panel is Editable
      Gives a sandbox to experiment
      Can change HTML and CSS on the fly to try out changes
      Changes are temporary by default
      Need to use a code editor for permanent changes
    Try it out in exercise 03_01 
      Select "down" arrow y click "Inspect"
      Resize browser to see how web page changes layouts and labels
      Remove elements from web page by selecting in element panel and delete key
  
  Inspect styles
    Styles panels shows all relevant CSS rules that apply to selected element
    Can also modify on the fly styles for selected element
    Box Model can be useful for debugging layout issues
    Top right corner offer tools :hov .cls +
    :hov allows to toggle element state
        :hover changes element to hover state
        selecting it also adds style for element as a:hover
        the can search for a:hover style and see which other CSS styles are applied
        can modify those temporarily to experiment
    Eventually liked changes should be applied in the code editor source file
    Sometimes just want to see the net effect:
      How big is the margin?
      What font size is displaying?
    Use the "Computed" tab to see final value for each CSS property of the element
      It is not showing style rules nor style sheet values
      Shows values that browser is using in rendering the item
      It's a way to cut through the CSS code to see a measurement or color value
      
  Use persistence to save changes
    Changes in Chrome's dev tools are only transitory by default
    You can choose to save changes automatically to their source files using workspaces
    To add workspace:
      Open "Sources" tab
      Select "FileSystem" subtab
      Click "Add folder to workspace"
      Select source code foled
      On top of Chrome browser click the "Allow" button
      The FileSystem explorer shows the folder
      Files that are directly linked to browser show a "green" dot
        Style.css
        script.js
      Making changes in Styles window will now also save them to source file
    To remove workspace to avoid saving chenges to source code:
      In Sources->FileSystems tab select the root of the folder
      Right click and select "Remove folder from workspace"
    
4) Using the Control Panel
  View Console Messages
    Ability to view error messages thrown by the parser
    Log and access your custom messages
    Command line that allow to enter JS and interact code browser's code
    Shortcut to directly open console from browser: ctrl+shift+j
    Filter: to filter messages
    Level drop down to filter by Verbose, Info, Warnings and Errors
    By Filtering console can focus on just task at hand
    
  Log Information to the Console
    Console.log() used to display debug messages for developing
      Log messages to the console
      Literal values
      Variable names
    Console.log() takes 'C language' format specifiers that start with a '%'
    
  Use the Console command line
    CLI can be used to
      Evaluate JavaScript expressions
        >Date.now()
        >new Date(Date.now())
      Select and inspect DOM elements
        >document.querySelector('nav')
        Helps to view specific part of the page rather that all surrounding code
    Chrome supports a shortcut syntax using the '$' sign
      Similar to jQuery to select elements by CSS selector, returns just first one
        >$('.content')
      To see element in surrounding context in 'Elements' panel use 'inspect' function
        >inspect($_)
      To see all matched selections use '$$' instead
        >$$('.content')
        
5) Using the Source Panel
  Open files in the developer tools
    Look at actual files that page is based on
    Verify code being loaded
    Debug JavaScript errors
    Can open files using Ctrl+P shortcut or using the "Network" tab explorer

  Work with breakpoints and the call stack
    Breakpoint halts browser execution at a line of code
    Can be done in JavaScript using the "debugger" command 
    Also in DevTools by clicking a line number
      Allows to enable/disable breakpoint
      When breakpoint is hit, variable values are shown in code with orange background
      Panel at right side of source contains sections to further debug code:
        Watch, Call Stack, Scope, Breakpoints ...
      
6) Using the Network Panel
  View HTTP request and response headers
    Network panel is most useful when loading pages using HTTP
    Use local http server:
      >http-server -p 8000
    Open Chrome browser using
      localhost:8000
    Open DevTools and select "Network" panel
    Use Shift-Refresh to reload all assets from source again ( not use cache )
    Displays
      Overview graphical time display
      Files requested with columns
        Status: 200 or other
        Type: document, style sheet, script, jpeg ...
        Initiator: where it was requested from
        Size: Bytes, KB ...
        Time: ms
        Waterfall: time graph for given file
    Selecting a file allows to:
      Look at
        Headers: Summary, Response and Request Headers
        Preview: how file looks
        Response:
        Cookies:
        Timing: graph of connection and downloads steps for specific resource
    
  Identify items that slow page loading
    Network Waterfall column
      Displays graphical representation of time taken by different stages of each request
      Main components:
        White box: queuing
        Green box: waiting
        Blue box: content download
        Gray box: stalled
        Teal box: DNS lookup
        Orange box: initial connection
      Helps identify bottle necks experiencing in resource loading
    Top overview graph helps identify "gaps" in download
      Before investigating analyze time scale to see if it is significant
      Be aware that localhost tests will be faster than remote/cloud servers
        Run timing tests again and check timing
        Server optimizations:
          Choices of CDNs
          server redundancy
    Script downloads may be combined into a single file to speed up
      Saving multiple HTTP requests
      Measure to see if it is worthed
    Questions of performance optimization: 
      Packaged scripts
      HTTP1 vs HTTP2
      Things to keep in mind      
  
  Emulate mobile connections
    Measuring load time doesn't give entire picture
    Users may be on slower connections than you
    Network panel lets you throttle your connection over a range
      Slow wired connections
      Lower-bandwidth DSL
      Standard WiFi
    Experimenting with slower bandwidths gives an idea of loading resource time
      For long loads, may use lighter versions of pages to faster loading
      Examples:
        Get rid of jQuery or only use calls needed
  
Conclusion
    Use DevTools with your own pages and webssites
    Explore other sites with DevTools
    HTTP/2: Developing for Performance