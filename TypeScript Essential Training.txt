TypeScript Essential Training ( Jess Chadwick @ lynda.com )

Introduction
  TypeScript designed to be compiled into fully compatible Javascript
  Is fully cross-platform: Windows, Mac, Linux
    Microsoft online editor: http://www.typescriptlang.org/play/
  Code sample available in: https://github.com/jchadwick/EssentialTypeScript

Introducing TypeScript
  What is TypeScript?
    Superset of JS
    Adding new features and syntax on top of the core language
  JavaScript is a Dynamic language
    More forgiving, "Duck" typing
    Errors are not always caught before application runs
    Has been asked to do more than originally designed to do
    Sometimes dynamic features are more a curse than a gift
  TypeScript is a static language
    Extends JavaScript with static typing capabilities
    Allows to opt in to static typing approach
    Cost: 
      define types before using 
      writing more code but peace of mind worthed
    Benefits:
      code easier to understand and maintain
      find code issues as early as possible
      don't always have to use static types
  Defining JavaScript
    First introduced in 1996 in Netscape browser
    ECMAScript (ES) standard created in 1997
      ES5 in 2009
      ES6 in 2015
    ECMAScript browser compatibility
      Not all browsers support latest ES versions:
      http://kangax.github.io/compat-table/es6/
    JS Transpilers
      Transpiler: tool to transform code form one language to another
        TypeScript => ECMASCript 5
  Writing your first TypeScript function:
    Go to: http://www.typescriptlang.org/play/
      function speak(value: string) : string {
          document.write(value);
          return value;
      }
      var greeted = "World";
      var greeting = "Hello, ";
      var whatToSay: string = greeting + greeted;
      speak(whatToSay);

1) Configuring Your Environment
  Choosing your TypeScript editor
    Need a text editor and TypeScript compiler
  Installing the TypeScript CLI
    TypeScript CLI is built in node.js
    >npm install -g typescript
    >tsc ( type script compiler)
  Install lightweight web server
    Serves files but also injects script to refresh browser automatically
    >npm install -g lite-server
    (There is another called "live-server")
    Run it
    >lite-server
  Creating a TypeScript project
    Create folder TypeScriptTodo
    Add index.html file with basic template
    Add app.js file
    Create TypeScript file but running:
      >tsc app.ts
      or on "watch" mode to compile when changes are done:
      >tsc -w app.ts
    Add TypeScript configuration file tsconfig.json
      In VS Code, add JSON object brackets { }
      Pressing Ctrl-space shows configuration options that can be used
      After this the tsc compiler treats root folder and subfolders as one project
      >tsc -w

2) ES6 Language Features
  Default parameters
    Syntatic sugar that makes code cleaner and easier to read
    Example:
      function countdown(initial, final = 0, interval = 1) {
      
  Template strings
    When want to construct a string that includes the values of your variables
    Use the back tick symbol: `...`
    Inside can write anything and an expression with ${...} syntax
    Inside the expression can put any JS expression and result will be rendered as string
    Example:
      container.innerHTML = `
      <div todo='${todo.id}' class="list-group-item}">
          <i class="${todo.completed ? "" : "hidden"} text-success glyphicon glyphicon-ok"></i>
          <span class="name">${todo.name}</span>
      </div>
      `
  Let and const
    "let" keyword respects inner block own scope unlike "var" keyword
    "const" keyword defines a variable with a permanent value that can not be changed
  For...of loops
    JS "for ... in" keyword iterates over the indexes of an array
    TS "for ... of" keyword iterates over the values of array directly
    
  Lambdas
    "this" keyword introduces some unexpected behavior since its scope is not clear
    "arrow functions" address this, also called "lambda expressions" in other languages
      they replace "function()" by just "() =>" 
      also if they take just one parameter, the "()" can be omitted:
        var filtered = [1,2,3].filter( (x) => { return x>0; }
      can be simplified to
        var filtered = [1,2,3].filter( x => x>0 )
        
  Destructuring
    Assigning values to multiple variables from a single object in a single statement:
      var array = [123, "Pcik up drycleaning", false];
      var [id, title, completed] = array;
      // swap values
      var a = 1;
      var b = 5;
      [a,b] = [b,a];
    With objects, values are assigned by matching the name of the property with name of variable:
      var todo = {
        id: 123,
        title: "Pick up drycleaning",
        completed: false
      }
      var {title, completed, id} = todo;
    Even works when mapping function return values:
      var {title, completed, id} = getTodo();
    To map a variable to a different property name use "colon" syntax:
      var {title: theTitle, completed: isCompleted, id} = getTodo();
    Reduce a long list of method parameters into a single option object:
      function countdown({
        initial,
        final: final = 0,
        interval: interval = 1,
        initial: current  // assigning current = initial
      }) {
        while (current > final) {
          console.log(current);
          current -= interval;
        }
      }
      countdown({initial:10});
      
  The spread operator
    Helpful for
      Implement methods with unlimited number of arguments
      Clean up code with a lot of array manipulation
    Represented by three periods (...variable) to retrieve any number of arguments
      function add(...values) {
        var total = 0;
        for (var value of values)
         total += value;
        return total;
      }
      add(1,2,3,4,5);
    Has to be the last argument in the parameter's list:
      function calculate(action, ...values) {
        var total = 0;        
        for (var value of values) {
          switch(action) {
            case 'add':
              total += value;
              break;
            case 'substract':
              total -= value;
              break;
          }
        }
        return total;
      }
    Can be used to work with arrays to inject many values:
      var source = [3,4,5];
      var target = [1,2, ...source, 6,7];
    To append items to an existing array:
      var list = [1,2,3];
      var toAdd = [4,5,6];
      list.push(...toAdd);
      
  Computed properties
    Denoted by wrapping properties in brackets [propName] and using expressions
    Good for creating dynamic property names:
      const osPrefix = 'os_';
      var support = {
        [osPrefix + 'Windows']: isSupported('Windows'),
        [osPrefix + 'iOS']: isSupported('iOS'),
        [osPrefix + 'Android']: isSupported('Android'),
      }
      function isSupported(os) {
        return Math.random() >= 0.5;
      }
      
3) Type Fundamentals
  Introducing JavaScript types
    There are six total JS types:
      Three are immutable: boolean, number and string
      Two special types: null / undefined
      One for all other: object
        Can be thought as a dictionary of properties indexed by string keys
        Object properties may be changed after they are defined
        Can even add new properties on the fly
        Date, RegEx, etc... are just different kind of objects, not types
    Most important object types are:
      Functions
        Also contains collection or properties like any other object
        Contain logic that can be executed
      Arrays
        Contains collections of values with integer key indexes
      Both have "Prototypical Inheritance" to extend base class and all instances
        Share properties and behavior through inheritance
    Object literals
      A way to define and instantiate an object at the same time
      Very simple and straight forward syntax
        var animal = {
          name: "Fido",
          species: "Dog",
          age: 5,
          speak: function() { console.log('Woof!'); }
        }

  Understanding type inference
    TypeScript is very good to infer variable and function types
    When it can not infer type, it assigns the "any" type
      The most dynamic and unrestrictive type of all
      Is the default dynamic type behavior of JavaScript
      But using "any" type prevents editor's syntax help on static type protection
      
  Specifying JavaScript types
    The more explicit in your intent, the better the system finds mistakes!
    Add types with the colon operator:
      function totalLength(x: any[], y: string): number {
        let total: number = x.length + y.length;
        return total;
      }
  
  Specifying function parameter types
    Union type allows to define more than one type to a parameter
    Helpful in creating flexible and forgiving functions and variables types
    Not completing giving up the safety of static typing
    Specified using the "|" pipe operator to list additional types:
      function totalLength(x: (string | any[]), y: (string | any[])): number {
    Intellisense will list only properties that are common to those union types
    Use "instanceof" keyword to use specific type properties
    Known as type guard syntax:
      if ( x instanceof Array ) {
        x.push('abc');
      }
    For "primitive" types use "typeof" operator:
      if ( typeof x === 'string' ) {
        x.substr(1);
      }
  
  Adding function overloads
    Create different signatures for the same function name
    It is simply metadata for TypeScript help you write better code
      function totalLength(x: string, y: string): number
      function totalLength(x: any[], y: any[]): number
      function totalLength(x: (string | any[]), y: (string | any[])): number {
      ...
    Intellisense will show two different overloads of the same function
    It does not change the actual behavior of the function in JavaScript
    
4) Custom Types
  Defining custom types with interfaces
    TypeScript offers 3 ways to define a custom type: 
      interfaces, classes and enums
    Interfaces:
      Acts as a contract
      Describes data and behavior that object exposes for interaction with others
      Just describes what you intend to happen, they don't enforce it!
      Have no effect on the code at runtime
      Used for compile time checks only
        Help to catch more errors at build time
      Properties can be defined as optional with the '?' operator
      Define the data structure of an object to make it easy to interact with instances:
        interface Todo {
          name: string;
          completed?: boolean;
        }
      A function is defined with parenthesis without the 'function' keyword
      It can be used to define a service of methods allowed to be called:
        interface ITodoService {
          add(todo: Todo): Todo;
          delete(todoID: number): void;
          getAll(): Todo[];
          getById(todoId: number): Todo;
        }
  Using interfaces to describe functions
    JavaScript is not only a dynamic language BUT also a functional language
    Functions are also objects
      They can be assigned to variables
      They can have their own properties and methods
      Interfaces can be used to define function objects
    Casting syntax "<interface>" can be used to treat functions as instance of interface
      Is the opposite of "any" keyword
    Example of defining a jQuery interface:
      interface jQuery {
        (selector: string): HTMLElement;
        version: number;
      }
      var $ = <jQuery>function(selector) {
        // Find DOM element
      }
      var $.version = 1.12;
      var element = $('#container');
  Extending interface definitions
    To extend third party interfaces, just add another interface with same name
    Add custom method into the new interface and TypeScript will list all custom methods
      // Third party definition
      interface jQueryElement {
        data(name: string): any;
        data(name: string, data: any): jQueryElement;
      }
      // Custom methods definition
      interface jQueryElement {
        todo(): Todo;
        todo(todo: Todo): jQueryElement;
      }
    Everything defined in custom definition will be added to original definition
    Only apply to code your do not own!
  Defining constant values with enums
    Enums define a set of meaningful constant values to use
    Give meaning to the important code values which makes code easier to understand
    They replace the 'magic' string and values which are meaningless without context
    Help avoid hard coding meaningful values all through the code
      enum TodoState {
        New = 1,
        Active,
        Complete,
        Deleted
      }
    For each enum element, TypeScript defines two properties in JS;
      A string value with a numeric key
      A numeric value with a string key
        TodoState = {
          1: "New", 
          2: "Active", 
          3: "Complete", 
          4: "Deleted", 
          New: 1, 
          Active: 2, 
          Complete: 3, 
          Deleted: 4
        }
    It is the syntax to dynamically access a property on an object
    These allows to print enum values with meaningful names:
      var state = TodoState.New
      TodState[state] will return "New"
  Defining anonymous types
    When declaring interfaces right inline anywhere it accepts a type
      var todo : { name: string };
      
5) Classes
  Understanding prototypical inheritance
    Implement custom types using classes with object oriented functionality
      inheritance
      abstraction
      encapsulation
    In JS is still based on objects and prototypical inheritance
      AKA prototype-based programming
    Prototype is a special object
      Define shared behavior on the Prototype object
    In JS, objects are just bags of dynamic properties
    Accessing an object's member in JS:
      First looks in the object itself
      Then looks in object's prototype object
      Otherwise goes to prototype's prototype
      Cycle continues all the way up the chain to Object.prototype
    Prototype object is automatically linked by JavaScript when:
      An object is created, the Object prototype is linked
      When a function is created, the Function prototype is linked
      When an array is created, the Array prototype is linked
    The most common way to assign a prototype is with the constructor
      A function that is called with the "new" keyword
      JS does three things:
        Creates a new object that is available with the "this" keyword
        Sets new object's prototype to the constructor's function prototype
        Executes the function that is called with the "new" using "this" as object's reference
    Example:
      function TodoService() {
        this.todos = [];
      }
      TodoService.prototype.getAll = function() {
        return this.todos;
      }
      var service = new TodoService();
      service.getAll();

  Defining a class
    ECMAScript6 introduced the "class" syntax
    Allows to define class in a more simple and straightforward way
    Highly effective way to think and implement object based behavior
      Nice clean maintainable objects
    Ability to define constructor parameter and class property all in one expression
      Just put an access modifier in front of the parameter:
        class TodoService {
          constructor(private todos: Todo[]) {}       
          getAll() { return this.todos; }
        }

  Applying static properties
    Global variables are considered bad practice and to be avoided at all costs
    ES6 "static" keyword allows to have a single class instance for properties and methods
      class TodoService {
        static lastId: number = 0;
        constructor(private todos: Todo[]) {}
        add(todo: Todo) { var newId = TodoService.getNextId(); }
        getAll() { return this.todos; }
        static getNextId() { return TodoService.lastId += 1; }
      }
      
  Making properties smarter with accessors
    Adding getter and setter methods in a class using the "get" and "set" keywords
      class SmartTodo {
        _state: TodoState; 
        get state() { return this._state; }        
        set state(newState) {
            if(newState == TodoState.Complete) {
              ... validation logic ...
            }            
            this._state = newState;
        }
        ...

  Inheriting behavior from a base class
    To create a derived class use the "extends" keyword
    If constructor is not defined, it will use the base class constructor
    If constructor is defined, it must call base class constructor in first statement
      Use the super() function call to call base's constructor
    To override a method, just create method with same signature, no special keyword
      To call base's overridden method, call super.methodName()
    Example:
      class CompleteTodoStateChanger extends TodoStateChanger {
        constructor() {
            super(TodoState.Complete);
        }       
        canChangeState(todo: Todo): boolean {
            return super.canChangeState(todo) && (
                  todo.state == TodoState.Active
               || todo.state == TodoState.Deleted
            )
        }        
      }
      
  Implementing an abstract class
    JS does not support the idea of abstract class
    TypeScript does support them
    Use abstract class when intend is to always inherit from it, not instance it
    Using "abstract" keyword in front of class definition
    Also internal method can be declared "abstract"
    Example:
      abstract class TodoStateChanger {
        constructor(private newState: TodoState) {}
        abstract canChangeState(todo: Todo): boolean;
        changeState(todo: Todo): Todo {
            if(this.canChangeState(todo)) {
                todo.state = this.newState;
            }
            return todo;
        }
      }

      class CompleteTodoStateChanger extends TodoStateChanger { ...
      
  Controlling visibility with access modifiers
    Allow to express usage access intent in TypeScript although JS does not have them
    Three access modifiers to how much protection to give to class's members:
      private:
        the most restrictive
        only methods defined in same class can access it
        convention is to prefix variables with underscore to denote private "_varName"
      protected:
        available to only methods defined in same class or inherited
      public:
        least restrictive
        may be accessed from any other type
        default JavaScript behavior, default access modifier, usually not seen
        mainly seen in the constructor parameter definition
    
  Implementing interfaces
    Use "implements" keyword on a class to enforce interface behavior on a class
    Can implement more than one interface
    Example:
      class TodoService implements ITodoService, IIdGenerator { ...

6) Generics
  Introducing generics
    A way to create functions and classes that define a common behavior
    Can be reused across many different types
    Retain the full information about that type
    The syntax is to use <T> after function name but before parenthesis:
    <T> is a token name for the actual type
    Example:
      function clone<T>(value: T): T {
        let serialized = JSON.stringify(value);
        return JSON.parse(serialized);
      }
    
  Creating generic classes
    Can create classes where member's type change
    Example:
      class KeyValuePair<TKey, Tvalue> {
        constructor(
          public key: TKey,
          public value: Tvalue
        ) {}
      }
      let pair1 = new KeyValuePair<number, string>(1,'First');
      let pair2 = new KeyValuePair<string, Date>('Second', new Date(Date.now()));
      let pair3 = new KeyValuePair<number, string>(3,'Third');

  Applying generic constraints
    Use the keyword "extends" on the generic type with an anonymous types, interfaces,
    classes or primitive types to specify the constraint
    Example:
      function totalLength<T extends { length: number}>(x: T, y: T) {
        var total: number = x.length + y.length;
        return total;
      }

    Can also use any type that is compatible with type T, including types that inherit from it
      class CustomArryay<T> extends Array<T> { }
      var length = totalLength([1,2,3],new CustomArryay<number>())
      
7) Modules
  Understanding the need for modules in JavaScript
    One problem that still lingers today is putting all variables in global namespace
      Global Namespace == BAD!
      Encourages implicit sharing between components
      Difficult to determine component boundaries
      Difficult to determine component dependencies
      Produces "spaghetti code"
        Entire application becomes a giant ball of intertwined threads
    Modules
      Keep components separate from one another
      Encourages more explicit dependencies
      Produce clearer component boundaries
      In JavaScript
        Did not exist prior to ECMAScript 2015
        Had to use design patterns in lieu of standard APIs
      Book: Learning JavaScript Design Patters by Addy Osmani
        https://addyosmani.com/resources/essentialjsdesignpatterns/book/index.html
        Module Pattern/revealing Module Pattern
        Namespaces
        ECMAScript 2015 modules/module Loaders
  Organizing your code with namespaces
    Helps avoid naming collisions
    Can declare same namespace multiple times in same file or different files
    Defined with "namespace" keyword
    Use "export" keyword to expose type definitions outside namespace
    Use "import" to import a type from another namespace
      namespace TodoApp.Model {
        export interface Todo {
          id: number;
          name: string;
          state: TodoState;
        } 
        export enum TodoState {
          New = 1,
          Active,
          Complete,
          Deleted
        }  
      }
      namespace DataAccess {
        import Model = TodoApp.Model;
        import Todo = Model.Todo;
        export interface ITodoService {
          add(todo: Todo): Todo;
          delete(todoId: number): void;
          getAll(): Todo[];
          getById(todoId: number): Todo;
        }       
      }

  Using namespaces to encapsulate private members
    Design pattern IIFE: Immediately Invoked Function Expression
    Popular to encapsulate code while it executes
    Choose which parts will be exposed outside by specifying as the return value
    Syntax is a normal function that is immediately executed and wrapped in ():
      ( function defineType() {
      }() )
    A simple jQuery sample using an external object to use as parameter:
      var jQuery = {
        version: 1.19,
        fn: {}
      };
      (function defineType($) {
        if( $.version < 1.15 )
            throw 'Plugin requires jQuery version 1.15+'
        $.fn.myPlugin = function() {
            // my plugin code
        }
      })(jQuery)
    A TypeScript Namespace declarations is defined in JS just as an IIFEs
    Enums and classes are declared using this same IIFE pattern
    Namespace can also be used to create private variables and functions
    Namespace approach also referred as the internal module approach
    
  Understanding the difference between internal and external modules
    Both encourage encapsulation and organization
    Different implementations
      Internal - namespace function scope
      External - file scope
    Both require components to be exported and imported
    TypeScript Module Import Syntaxes
      Require (like Node.js)
      ECMAScript 2015 standard
      Functionally equivalent. Generate the same code.
      
  Switching from internal to external modules
    External modules use the file where they are defined as their module scope
    So can remove internal "namespaces" definitions within the file's module
    Add "module" setting inside the tsconfig.json file:
      {
        "compilerOptions": {
          "target": "es5",
          "module": "system"
          ...
  Importing modules using CommonJS syntax ( require )
    To import file module, use the "import" keyword with "require" keyword
    Use only module name but not file extension
    Also create a type alias from imported module to save long module.type names:
      import Model = require('./model');
      import Todo = Model.Todo;
      
  Importing modules using ECMAScript 2015 syntax
    Allows to import module and type in one statement:
      import { Todo, TodoState } from './model'
    To import javascript files that don't have modules but are used:
      import './jQuery'
      
  Loading external modules
    Load systemjs module loader:
      >npm install systemjs
    In Index.html link system.js file and import the app module:
      <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.22/system.js"></script>
      <script type="text/javascript">
          System.defaultJSExtensions = true;
          System.import('app');
      </script>

8) Real-World Application Development
  Introducing the sample JavaScript application
    Analyze code 08_01 for JavaScript ES5 only implementation
    It will be converted into a TypeScript application

    Converting existing JavaSript code to TypeScript:
    Main steps for conversion:
      Adding a tsconfig.json file
        {
          "compilerOptions": {
            "target": "es5"
          }
        }
      Renaming files from .js to .ts
      Update ts files to use ECMAScript 2015 syntax
    Start up TypeScript compiler in watch mode to see any compiler errors:
      >tsc -w
    Start converting the core code, TodoService.ts in this Todo application
      Keeps track of all the todo items
      Others classes interact with it
      TypeScript will help with type inference to help push the static typing
    Converting TodoService.ts
      Function into a class
      Private members into "private static"
      Constructor function TodoService(todos) into constructor(todos)
      For all function methods remove the TodoService.prototype prefix
        Also remove the "= function" keyword
      Create interfaces and enum for objects and magic number
      Apply types to object, number, parameters, variables and return types
      Add overloads to applicable methods
      Convert anonymous functions to arrow functions
      Define "clone" method into a generic function

      Generating declaration files
    Not all libraries are written in TypeScript
    Declaration file describes a library that is not written in TypeScript
      Describes the type information about the JavaScript code
      Kind like the "include" files in C / C++
      They just describe and implementation that lives in another file
    TypeScript will generate declaration files
      In tsconfig.json set
            "declaration": true
      Save file and run the compiler
        >tsc -w
      For each TypeScript file it will create another file with extension "d.ts"
        Each declaration file contains "ambient" declarations
        No implementation code, just type definitions
      Useful when creating libraries in JS along with a declaration for type info

  Referencing third-party libraries
    Tool "tsd" helps download typescript declarations for libraries
      >npm install -g tsd (deprecated)
      >npm install -g typings
    Once install, use query command to search for packages
      >tsd query jquery
      >typings search jquery
      NAME                 SOURCE HOMEPAGE   SCRIPTION VERSIONS UPDATED
      jquery               dt     http://jquery.com/   2        2017-03-10T22:21:11.000Z
    If a library found, install it
      >typings install dt~jquery --global --save
    Creates a typings.json file that allows to reinstall declaration file with
        >typings install
    Afterwards declare JQuery object in TodoListComponent.ts
      class TodoListComponent {
        private $el: JQuery;
        constructor(el: HTMLElement) {
            this.$el = $(el);
        }
        ...
    Compiler "tsc" should find no more jQuery related errors
    Typings coming from a community supported project on github:
      https://github.com/DefinitelyTyped/DefinitelyTyped
      
  Converting to external modules
    Get all code out of global namespace and into external modules
    In tsconfig.json add the module option:
      "module": "system"
    Separation of concerns is the true power of the external module approach
    For each file, can choose one member to be the "default" member of the module
      Changes the export and import syntax slightly, out of brackets
    Code Changes:
      Move "Todo" and "TodoState" to its own Module.ts file
      Go to each file and export its types and import dependency types
      Module.ts:
        export interface Todo { ...
        export enum TodoState { ...
      TodoService.ts: 
        Also move private static members into module scope and fix refs:
          import { Todo, TodoState } from './Model';
          export interface ITodoService { ...
          let _lastId = 0;
          function generateTodoId() : number { ...
          function clone<T>(src: T) : T { ...
          export default class TodoService implements ITodoService{ ...
      TodoListComponent.ts:
        Also import jQuery JS file to load it before it gets loaded
          import { Todo, TodoState } from './Model';
          import '//code.jquery.com/jquery-1.12.1.min.js';
          export default class TodoListComponent { ...
      TodoApp.ts:
        import { Todo, TodoState } from './Model';
        import TodoService, { ITodoService } from './TodoService';
        import TodoListComponent from './TodoListComponent';
        export class TodoApp { ...
      index.html:
        Remove all script tags and replace them with the JS script for "SystemJS"
        Use "SystemJS" objects to initialize launch the TodoApp module
          <script type="text/javascript" src="//.../system.js"></script>
          <script type="text/javascript">
            System.defaultJSExtensions = true;
            var theApp;
            System.import('TodoApp').then(function(module) {
              theApp = new module.TodoApp(document, [
                'Pick up drycleaning',
                'Clean Batcave',
                'Save Gotham',
                'Take out the trash'
              ]);
            });
          </script>

  Debugging TypeScript with source maps
    Source maps enable to debug TypeScript code inside the browser
    To see debugger without source maps:
      introduce a bug in the code in the 'todo-toggle' custom event
      run site and enable break on exceptions
      watch it crash when click to toggle state
      Chrome stops in JavaScript code line where error occurs
      But it is NOT in the source TypeScript code line!
      We don't care which JS script line has error, we need it in TypeScript!
    To use source map for debugging:
      In tsconfig.json set "sourceMap" to "true"
        "sourceMap": true
      "tsc" compiler
        creates a ".js.map" file for each TypeScript file with metadata
        appends a metadata comment link at the bottom of each *.js files
          //# sourceMappingURL=TodoApp.js.map
        Browsers downloads the source map files in the debugger
    Browser's debugger will show the error line in the TypeScript code
      Full debugger support
      Hover over variables
      Use console to execute expressions
        
9) Decorators
  Implementing method decorators
    Decorators allow to modify the behavior of a class, method, property or parameter
    Allows to define common behavior in a central place
    Easily apply it across application to reduce duplicate code
    Make code more readable and maintainable
    Basic method decorator pattern:
      A method that wraps another method
      Replaces original method with another method
      Calls original method and saves its result
      Example:
        var originalMethod = TodoService.prototype.add;
        TodoService.prototype.add = function(...args) {
            let returnValue = originalMethod.apply(this, args);
            return returnValue;
        }
      Functionality can be added before and after original method call
        ...
        console.log(`add(${JSON.stringify(args)})`);
        let returnValue = originalMethod.apply(this, args);
        console.log(`add(${JSON.stringify(args)}) => ${returnValue}`);
        ...
    Decorator is just a function with a special signature
      target: where the member lives on ( instance of a TodoService )
      methodName: name of method to be decorated ( add method )
      descriptor: contains all meta-data of method to be modified
      descriptor.value: is the original method itself
    Example of log method decorator:
      function log(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<Function>) {   
          var originalMethod = descriptor.value;
          descriptor.value = function(...args) {    
              console.log(`${methodName}(${JSON.stringify(args)})`);
              let returnValue = originalMethod.apply(this, args);    
              console.log(`${methodName}(${JSON.stringify(args)}) => ${JSON.stringify(returnValue)}`);    
              return returnValue;
          }    
      }
    To allow TypeScript to compile decorator add option in tsconfig.json file:
      "experimentalDecorators": true

  Implementing class decorators
    Can be use to modify class' constructor function and prototype members
      after the class has been defined
    Allows to dynamically attach methods to class definitions
    Like attaching a single "validate()" method to any class in application
    Create a new file Validator.ts and include code to define class decorator @validatable:
      import { Todo, TodoState } from './Model';

      @validatable
      export class ValidatableTodo implements Todo {
          id: number;
          name: string;
          state: TodoState;
      }
      // merged declaration
      export interface ValidatableTodo extends IValidatable { }

      export interface IValidatable {
          validate(): IValidationResult[];
      }

      export interface IValidationResult {
          isValid: boolean;
          message: string;
          property?: string;
      }

      export interface IValidator {
          (instance: Object): IValidationResult;
      }

      export function validate(): IValidationResult[] {
          let validators: IValidator[] = [].concat(this._validators),
              errors: IValidationResult[] = [];
          for (let validator of validators) {       
              let result = validator(this);        
              if(!result.isValid) {
                  errors.push(result);
              }        
          }    
          return errors;
      }
      export function validatable(target: Function) {   
          target.prototype.validate = validate;
      }
    Apply to TodoService.ts code:
      ...
      import { ValidatableTodo } from './Validators';
      ...
          var todo = new ValidatableTodo();
          todo.id = generateTodoId();
          todo.state = TodoState.Active;
          ...
          let errors = todo.validate();
          if (errors.length){
              let combinedErrors = errors.map(x => `${x.property}: ${x.message}`);
              throw `Invalid Todo: ${combinedErrors}`;
          }
          ...
    
  Implementing property decorators
    Allows to dynamically add behavior to properties
    Example of adding a "required" validator to a property:
      export function required(target: Object, propertyName: string) {
        let validatable = <{ _validators: IValidator[] }>target,
          validators = (validatable._validators || (validatable._validators = []));
        validators.push(function (instance) : IValidationResult {
          let propertyValue = instance[propertyName],
            isValid = propertyValue != undefined;
          if (typeof propertyValue === 'string') {
            isValid = propertyValue && propertyValue.length > 0;
          }
          return {
            isValid: isValid,
            message: `${propertyName} is required`,
            property: propertyName
          }
        })
      }
    Add it to the property using the "@" syntax:
      @required
      name: string;
    Test it by adding an empty "Todo" and looking at the console errors
  
  Implementing decorator factories
    Allow to pass a parameter to a decorator, need a decorator factory
    Decorator factory:
      A function that returns a decorator function
      The function itself does have to match the signature of a decorator
      It just need to return a function that matches the signature of decorator
      But parameter in decorator factory can be used inside the decorator logic
    Example:
      export function regex(pattern: string) {    
        let expression = new RegExp(pattern);
        return function regex(target: Object, propertyName: string) {
           ...
           isValid = expression.test(propertyValue)
           ...
    Apply it to property:
      @required
      @regex(`^[a-zA-Z ]*$`)
      name: string;
    Test:
      Enter a "Todo" with numbers or special characters to see validation error
      
Conclusion
  TypeScript adds power and security of static typing to JS applications
  Still details to learn like Compiler options
  Not many resourece yet:
    typescriptlang.org
    github.com/Microsoft/TypeScript